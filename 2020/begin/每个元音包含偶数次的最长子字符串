给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 'a'，'e'，'i'，'o'，'u' ，在子字符串中都恰好出现了偶数次。

 

示例 1：

输入：s = "eleetminicoworoep"
输出：13
解释：最长子字符串是 "leetminicowor" ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。
示例 2：

输入：s = "leetcodeisgreat"
输出：5
解释：最长子字符串是 "leetc" ，其中包含 2 个 e 。
示例 3：

输入：s = "bcbcbc"
输出：6
解释：这个示例中，字符串 "bcbcbc" 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。
 

提示：

1 <= s.length <= 5 x 10^5
s 只包含小写英文字母。

方法一：
暴力法，循环出每个子字符串，然后找出满足条件的最大子字符串，可以优化的一点就是从最大子字符串开始遍历，满足条件就可以退出循环


方法二：
[i,j]的字符串，其实就是[i,j]-[0,i-1]的字符串，所以可以保存每个位置的一个状态值，这个状态值就是包含的元音字符是否是偶数的一个状态。两个状态相同的值可以进行相减，
求出满足的最大子字符串。

class Solution(object):
    def findTheLongestSubstring(self, s):
        
        state = 0
        voweis = {"a":1, "e":2, "i":4, "o":8, "u":16}
        index = {0:-1}
        ans = 0
        
        for i in range(len(s)):
            if voweis.has_key(s[i]):
                state ^= voweis[s[i]]
                if not index.has_key(state):
                    index[state] = i
            distance = i - index[state]
            ans = max(distance, ans)
        
        return ans
