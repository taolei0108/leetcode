设计一个支持以下两种操作的数据结构：

void addWord(word)
bool search(word)
search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。

示例:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
说明:

你可以假设所有单词都是由小写字母 a-z 组成的。



来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-and-search-word-data-structure-design

Trie（前缀树）：
class TrieNode:
    def __init__(self):
        self.link = {}
        self.isend = False
    
    def put(self, c):
        if not self.link.has_key(c):
            self.link[c] = TrieNode()
    
    def get(self, c):
        if not self.link.has_key(c):
            return None
        
        return self.link[c]
    
    def setEnd(self):
        self.isend = True
    
    def isEnd(self):
        return self.isend

class WordDictionary(object):

    def __init__(self):
        
        self.root = TrieNode()

    def addWord(self, word):

        node = self.root
        for c in word:
            node.put(c)
            node = node.get(c)
        
        node.setEnd()
        

    def search(self, word):
        
        return self.searchall(self.root, word)

    def searchall(self, root, word):
        node = root
        for c in word:
            if c == ".":
                #如果字典树没有节点了，就返回False
                if not node.link.keys():
                    return False
                else:
                    #如果字典树有节点，用递归检测剩余的节点和剩余的字符串（去掉了.和之前的字符）
                    word1 = word[word.index(".") + 1:]
                    for v in node.link.values():
                        result = self.searchall(v, word1)
                        if result:
                            return True
                    return False

            elif not node.get(c):
                return False
            node = node.get(c)
        return node.isEnd()

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
