给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。



上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。

示例:

输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

链接：https://leetcode-cn.com/problems/trapping-rain-water

解法一：
暴力法，每个位置向左向右遍历找出左右最大值，然后取左右最大值的较小值减去当前高度
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) in [0,1,2]: return 0
        ans = 0
        for i in range(1,len(height)-1):
            leftmax = 0
            rightmax = 0
            for j in range(i):
                leftmax = max(leftmax, height[j])
            for j in range(i+1, len(height)):
                rightmax = max(rightmax, height[j])
            ans += max(min(leftmax, rightmax) - height[i], 0)
        
        return ans
        
 方法二：
 动态编程，在暴力方法中，我们仅仅为了找到最大值每次都要向左和向右扫描一次。但是我们可以提前存储这个值。因此，可以通过动态编程解决。
 class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) in [0,1,2]: return 0
        ans = 0
        leftmax = height[0]
        rightmax = height[-1]
        left = [0]*len(height)
        right = [0]*len(height)
        for i in range(len(height)):
            leftmax = max(leftmax, height[i])
            left[i] = leftmax
        for i in reversed(range(len(height))):
            rightmax = max(rightmax, height[i])
            right[i] = rightmax
        

        for i in range(1,len(height)-1):
            ans += min(right[i], left[i]) - height[i]
        
        return ans
        
 方法三：
 单调栈
 class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) in [0,1,2]: return 0
        rr = []
        ans = 0
        for i in range(len(height)):
            while rr and height[rr[-1]] < height[i]:
                index = rr.pop()
                while rr and height[rr[-1]] == height[index]:
                    rr.pop()
                if not rr: break
                ans += (min(height[rr[-1]], height[i]) - height[index]) * (i - rr[-1]- 1)
            rr.append(i)
        return ans

方法四：
双指针
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) in [0,1,2]: return 0
        ans = 0
        leftmax, rightmax = 0, 0
        left = 0
        right = len(height) - 1
        while left <= right:
            if leftmax < rightmax:
                if leftmax > height[left]:
                    ans += leftmax - height[left]
                else:
                    leftmax = height[left]
                left += 1
            else:
                if rightmax > height[right]:
                    ans += rightmax - height[right]
                else:
                    rightmax = height[right]
                right -= 1
        
        return ans
