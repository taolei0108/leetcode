给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。

换句话说，第一个字符串的排列之一是第二个字符串的子串。

示例1:

输入: s1 = "ab" s2 = "eidbaooo"
输出: True
解释: s2 包含 s1 的排列之一 ("ba").
 

示例2:

输入: s1= "ab" s2 = "eidboaoo"
输出: False
 

注意：

输入的字符串只包含小写字母
两个字符串的长度都在 [1, 10,000] 之间


class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        if len(s2) < len(s1):
            return False
        
        c = s1[0]
        k1 = {}
        for c in s1:
            if not k1.has_key(c):
                k1[c] = 0
            k1[c] += 1
        
        for i in range(len(s2)-len(s1)+1):
            if self.compare(k1.copy(), s2[i:i+len(s1)]):
                return True
        
        return False
        
    
    def compare(self, k2, s2):
        for c in s2:
            if k2.has_key(c):
                k2[c] -= 1
                if k2[c] == 0:
                    k2.pop(c)
            else:
                return False
        
        return True
           
 可以优化的地方：将字典换成数组存储
 可以继续优化的地方：优化数组，可以每次滑动的时候减1上一个字符的个数，增加1下一个字符个数
        
