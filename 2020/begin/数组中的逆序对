在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。

 

示例 1:

输入: [7,5,6,4]
输出: 5
 

限制：

0 <= 数组长度 <= 50000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

方法一：
暴力法，就是遍历每一个位置前比他它的数，一一计数，这里就不写了。

方法二：
归并排序，不断分成小数组的时候不需要做操作，等到合并的时候，前面的数组的数比后面的大时开始计数
class Solution(object):
    def reversePairs(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return self.dfs(nums, 0, len(nums)-1)

    def dfs(self, nums, l, r):
        if r - l <= 0: return 0

        middle = (l + r) >> 1
        ans = self.dfs(nums, l, middle) + self.dfs(nums, middle+1, r)

        i = l
        j = middle+1
        tmp = []
        
        # 下面这一段就是标准的归并排序
        while i <= middle and j <= r:
            if nums[i] > nums[j]:
                tmp.append(nums[j])
                j += 1
            else:
                #只不过多了这句，前面的数比后面大时计数加一
                ans += j - middle - 1
                tmp.append(nums[i])
                i += 1

        while i <= middle:
            #和上面一样
            ans += r - middle
            tmp.append(nums[i])
            i += 1
        while j <= r:
            tmp.append(nums[j])
            j += 1
        
        n = 0
        for k in range(l, r+1):
            nums[k] = tmp[n]
            n += 1
        
        return ans
        
