实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。

示例:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
说明:

你可以假设所有的输入都是由小写字母 a-z 构成的。
保证所有输入均为非空字符串。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/implement-trie-prefix-tree

class TrieNode:
    
    def __init__(self,c):
        self.link = {}
        self.char = c
        self.end = False

    def put(self, c):
        if not self.link.has_key(c):
            self.link[c] = TrieNode(c)
    
    def get(self, c):
        if self.link.has_key(c):
            return self.link[c]
        else:
            return None
    
    def setEnd(self, result):
        self.end = result
    
    def isEnd(self):
        return self.end

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode(None)

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        node = self.root
        for c in word:
            node.put(c)
            node = node.get(c)
        
        node.setEnd(True)

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        node = self.root
        for c in word:
            if node.get(c) == None:
                return False
            node = node.get(c)
        
        return node.isEnd()

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        node = self.root
        for c in prefix:
            if node.get(c) == None:
                return False
            node = node.get(c)
        
        return True
