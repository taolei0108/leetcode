给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。

示例:

输入: "25525511135"
输出: ["255.255.11.135", "255.255.111.35"]


方法一， 二分法求解，将字符串拆成两半，每一部分再去拆成两段去判断：
class Solution(object):
    def restoreIpAddresses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        if len(s) > 12 or len(s) < 4:
            return []

        length = len(s)
        start = [""]
        end = [""]

        for i in range(1, 4):
            if self.judge(s[:i]):
                start.append(s[:i])
            else:
                start.append("")

        for i in range(1, 4):
            if self.judge(s[length - i:]):
                end.append(s[length - i:])
            else:
                end.append("")


        left = []
        right = []
        result = []
        for j in range(2, length - 1):
            left = self.classify(s[:j])
            right = self.classify(s[j:])
            for l in left:
                for r in right:
                    result.append(l + "." + r)

        return result


    def classify(self, s):
        length = len(s)
        result = []
        for i in range(1, length):
            if self.judge(s[:i]) and self.judge(s[i:]):
                result.append(s[:i] + "." + s[i:])


        return result


    def judge(self, s):
        if len(s) > 3 or s == "":
            return False

        if s.startswith("0") and len(s) > 1:
            return False

        if int(s) > 255:
            return False

        return True
        
        
 当然也可以使用递归，暴力破解
