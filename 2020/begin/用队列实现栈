使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。


方法一：用两个队列，每次有新加入的元素时，a队列接收新元素后会把b队列里的元素一个个相加入自己，直到b队列空。此时将a和b交换，这样b队列执行get()方法得到的效果就是先进后出。不过因为python里Queue模块queue对象没有top()这种类似方法，所以我这里是先取出元素，这样就知道顶部元素了，然后再加入，可能因为这个原因，这种方法总是报超时。


from Queue import Queue


class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.a = Queue()
        self.b = Queue()
        self.first = None

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: None
        """
        if type(x) is not int:
            return
        self.a.put(x)
        while not self.b.empty():
            self.a.put(self.b.get())

        self.a, self.b = self.b, self.a
        self.first = x

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        now = self.b.get()
        self.first = self.b.get()
        self.push(self.first)
        return now

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        return self.first

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        return self.b.empty()

方法二：是用的python里的list，基本上用的都是list的方法实现的，不过速度挺快的，超过了90%。
当然类似的还有python里的双端队列deque，也是基本上都是使用的自带的方法。

class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.a = []

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: None
        """
        self.a.append(x)

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        return self.a.pop()

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        return self.a[-1]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        if self.a:
            return False
        
        return True
