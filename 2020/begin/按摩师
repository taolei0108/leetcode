一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。


方法一：动态规划
class Solution(object):
    def __init__(self):
        self.maxvalue = 0

    def massage(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        self.dfs(0, nums, 0)
        self.dfs(1, nums, 0)
        return self.maxvalue

    def dfs(self, index, nums, value):
        if index >= len(nums): return

        value = value + nums[index]
        self.maxvalue = max(self.maxvalue, value)
        self.dfs(index + 2, nums, value)
        self.dfs(index + 3, nums, value)

优化，将进行的每个预约时最大值进行记录，如果小于这个最大值就不进行递归
class Solution(object):
    def __init__(self):
        self.count = {}

    def massage(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 1:
            return nums[0]

        self.dfs(0, nums, 0)
        self.dfs(1, nums, 0)
        return max(self.count[len(nums)-1], self.count[len(nums)-2])

    def dfs(self, index, nums, value):
        if index >= len(nums): return

        if not self.count.has_key(index):
            self.count[index] = -1

        value = value + nums[index]
        if self.count[index] >= value:
            return
        elif self.count[index] < value:
            self.count[index] = value
            self.dfs(index + 2, nums, value)
            self.dfs(index + 3, nums, value)
