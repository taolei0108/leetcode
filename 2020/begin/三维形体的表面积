在 N * N 的网格上，我们放置一些 1 * 1 * 1  的立方体。

每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。

请你返回最终形体的表面积。

 

示例 1：

输入：[[2]]
输出：10
示例 2：

输入：[[1,2],[3,4]]
输出：34
示例 3：

输入：[[1,0],[0,2]]
输出：16
示例 4：

输入：[[1,1,1],[1,0,1],[1,1,1]]
输出：32
示例 5：

输入：[[2,2,2],[2,1,2],[2,2,2]]
输出：46
 

提示：

1 <= N <= 50
0 <= grid[i][j] <= 50
通过次数16,555提交次数26,034

方法一：
遍历每一个坐标，计算每个坐标上的面积（当然减去了重合面积）
class Solution(object):
    def surfaceArea(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        ans = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] != 0:
                    ans += self.calculate(i,j,grid)
        
        return ans
    
    def calculate(self,i,j,grid):
        count = grid[i][j] * 4 + 2
        if i - 1 >= 0:
            count -= min(grid[i][j], grid[i-1][j])
        if i + 1 < len(grid):
            count -= min(grid[i][j], grid[i+1][j])
        if j - 1 >= 0:
            count -= min(grid[i][j], grid[i][j-1])
        if j + 1 < len(grid[i]):
            count -= min(grid[i][j], grid[i][j+1])
        
        return count

优化：上面的方法是计算了每一个坐标四周的重合面积，这样会有重复计算，其实可以只算每个坐标左边和上边的重合面积
