给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
说明:

可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-increasing-subsequence
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

方法一：
动态规划 ，时间复杂度 O(n2)
class Solution(object):

    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        
        temp = [1]*len(nums)

        for i in range(1, len(nums)):
            for j in range(i):
                if nums[i] > nums[j] and temp[i] <= temp[j]:
                    temp[i] = temp[j] + 1
            
        return max(temp)
        
 方法二：
 贪心+二分法，时间复杂度O(nlogn)
 贪心的思想：维护一个最长的递增序列，并且里面的值越小越好
 维护一个temp数组是严格递增，遍历原数组时，碰到比temp数组最后一位大的直接加到temp最后一位，如果碰到比temp[-1]大的，则二分法查找出temp第一个
 比nums[i]大的值将它替换掉
 class Solution(object):

    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        temp = []

        for i in range(len(nums)):
            if not temp or nums[i] > temp[-1]:
                temp.append(nums[i])
            elif nums[i] < temp[-1]:
                l = 0
                r = len(temp) - 1
                loc = r
                while l <= r:
                    m = (l + r) / 2
                    if temp[m] < nums[i]:
                        l = m + 1
                    elif temp[m] >= nums[i]:
                        r = m - 1
                        loc = m
                    
                temp[loc] = nums[i]

            
        return len(temp)
