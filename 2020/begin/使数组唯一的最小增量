给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。

返回使 A 中的每个值都是唯一的最少操作次数。

示例 1:

输入：[1,2,2]
输出：1
解释：经过一次 move 操作，数组将变为 [1, 2, 3]。
示例 2:

输入：[3,2,1,2,1,7]
输出：6
解释：经过 6 次 move 操作，数组将变为 [3, 4, 1, 2, 5, 7]。
可以看出 5 次或 5 次以下的 move 操作是不能让数组的每个值唯一的。
提示：

0 <= A.length <= 40000
0 <= A[i] < 40000

方法一：计数法
class Solution(object):
    def minIncrementForUnique(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        d = [0]*80000
        maxvalue = 0
        minvalue = 40000
        for a in A:
            d[a] += 1
            maxvalue = max(maxvalue,a)
            minvalue = min(minvalue,a)
        
        taken = 0
        count = 0

        for i in range(minvalue,len(d)):
            if d[i] > 1:
                taken += d[i] - 1
                count -= (d[i]-1)*i
            elif taken >0 and d[i] == 0:
                taken -= 1
                count += i
            elif taken == 0 and i >= maxvalue:
                break
        
        
        return count
 
方法二：排序
