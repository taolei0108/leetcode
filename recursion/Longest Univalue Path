Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

The length of path between two nodes is represented by the number of edges between them.

 

Example 1:

Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output: 2

 

Example 2:

Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output: 2

 

Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.

-------------------------------------------------------------------------------------------------------------------------------
方法一：
思路

我们可以将任何路径（具有相同值的节点）看作是最多两个从其根延伸出的箭头。

具体地说，路径的根将是唯一节点，因此该节点的父节点不会出现在该路径中，而箭头将是根在该路径中只有一个子节点的路径。

然后，对于每个节点，我们想知道向左延伸的最长箭头和向右延伸的最长箭头是什么？我们可以用递归来解决这个问题。

算法

令 arrow_length(node) 为从节点 node 延伸出的最长箭头的长度。如果 node.Left 存在且与节点 node 具有相同的值，则该值就会是 1 + arrow_length(node.left)。在 node.right 存在的情况下也是一样。

当我们计算箭头长度时，候选答案将是该节点在两个方向上的箭头之和。我们将这些候选答案记录下来，并返回最佳答案。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int maxL = 0;
    
    public int longestUnivaluePath(TreeNode root) {
        if(root == null) return 0;
        
        longest(root);
            
        return maxL;
    }
    
    private int longest(TreeNode node){
        if(node == null) return 0;
        
        int left = longest(node.left);
        int right = longest(node.right);
        
        int leftlength = 0;
        int rightlength = 0;
        if(node.left != null && node.left.val == node.val){
            leftlength += left + 1;
        }
        
        if(node.right != null && node.right.val == node.val){
            rightlength += right + 1;
        }
        
        maxL = Math.max(maxL, leftlength+rightlength);
        
        return Math.max(leftlength, rightlength);
    }
}
