Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3

Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

-----------------------------------------------------------------------------------------------------------------------------
方法一（hashmap记录出现的次数）
class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        int len = nums.length;
        for(int i=0; i<len; i++ ){
            if(map.get(nums[i]) == null){
                map.put(nums[i], 0);
            }
            int n = map.get(nums[i]);
            map.put(nums[i], n+1);
        }
        
        for(int num: map.keySet()){
            if(map.get(num) > len/2) return num;
        }
        
        return -1;
    }
}

方法二（摩尔投票）
class Solution {
    public int majorityElement(int[] nums) {
        int maj = nums[0];
        int num = 0;
        for(int i: nums){
            if(maj != i){
               if(num == 0) {
                    maj = i;
                    num += 1;
                } else {
                    num--;
                } 
            } else {
                num++;
            }  
        }
        
        return maj;
    }
}
这个方法的意思是 从第一个数字开始count=1，当出现相同的次数加1，不同则减1，当次数为0则替换为当前数字，重新开始。

摩尔投票算法可以快速的计算出一个数组中出现次数过半的数即大多数（majority），算法核心思想是同加，异减。这个算法的时间复杂度是线性的O(n)

方法三：（位运算）
思路：任何数换算成二进制，每一位不是0就是1，那可以统计每一位是0多还是1多，最后统计完后那众数也就出来了

方法四：（中位数）
思路：将数组排序，那数组中间一位肯定是众数，当然这里的时间复杂度就取决使用的排序算法，推荐快排，时间复杂度O(logn),空间复杂度O(1)
